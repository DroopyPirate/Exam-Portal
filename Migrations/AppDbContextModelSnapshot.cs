// <auto-generated />
using System;
using Exam_Portal.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Exam_Portal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Exam_Portal.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Exam_Portal.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Division")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("InitialLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Exam_Portal.Models.AssignedTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Group_id")
                        .HasColumnType("int");

                    b.Property<int>("Test_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Group_id");

                    b.HasIndex("Test_id");

                    b.ToTable("AssignedTests");
                });

            modelBuilder.Entity("Exam_Portal.Models.DescriptiveAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Question_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Question_id");

                    b.ToTable("DescriptiveAnswers");
                });

            modelBuilder.Entity("Exam_Portal.Models.DescriptiveResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<int>("Question_id")
                        .HasColumnType("int");

                    b.Property<string>("User_answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Question_id");

                    b.HasIndex("User_id");

                    b.ToTable("DescriptiveResults");
                });

            modelBuilder.Entity("Exam_Portal.Models.Groups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<int>("Creator_id")
                        .HasColumnType("int");

                    b.Property<string>("Division")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Semester")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Creator_id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Exam_Portal.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<string>("Division")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Exam_Portal.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Is_right_choice")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Option_")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Question_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Question_id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Exam_Portal.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<string>("Question_")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Question_type_id")
                        .HasColumnType("int");

                    b.Property<int>("Tag_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Question_type_id");

                    b.HasIndex("Tag_id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Exam_Portal.Models.QuestionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Is_right")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Option_id")
                        .HasColumnType("int");

                    b.Property<int?>("TestQuestion_id")
                        .HasColumnType("int");

                    b.Property<int>("TestQuestions_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Option_id");

                    b.HasIndex("TestQuestion_id");

                    b.HasIndex("User_id");

                    b.ToTable("QuestionResults");
                });

            modelBuilder.Entity("Exam_Portal.Models.Question_type", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("question_type")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("Question_Types");
                });

            modelBuilder.Entity("Exam_Portal.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Creator_id")
                        .HasColumnType("int");

                    b.Property<string>("Tag_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Creator_id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Exam_Portal.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Duration")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<int>("Faculty_id")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<int?>("Marks")
                        .HasColumnType("int");

                    b.Property<int?>("PassingMarks")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Faculty_id");

                    b.HasIndex("Type_id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Exam_Portal.Models.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Question_id")
                        .HasColumnType("int");

                    b.Property<int>("Test_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Question_id");

                    b.HasIndex("Test_id");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("Exam_Portal.Models.TestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("Exam_Portal.Models.TotalResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Result")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Test_id")
                        .HasColumnType("int");

                    b.Property<int>("Total_marks")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Test_id");

                    b.HasIndex("User_id");

                    b.ToTable("TotalResults");
                });

            modelBuilder.Entity("Exam_Portal.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Group_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Group_id");

                    b.HasIndex("User_id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Exam_Portal.Models.AssignedTest", b =>
                {
                    b.HasOne("Exam_Portal.Models.Groups", "Group")
                        .WithMany("AssignedTests")
                        .HasForeignKey("Group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.Test", "Test")
                        .WithMany("AssignedTests")
                        .HasForeignKey("Test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Exam_Portal.Models.DescriptiveAnswer", b =>
                {
                    b.HasOne("Exam_Portal.Models.Question", "Question")
                        .WithMany("DescriptiveAnswers")
                        .HasForeignKey("Question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Exam_Portal.Models.DescriptiveResult", b =>
                {
                    b.HasOne("Exam_Portal.Models.Question", "Question")
                        .WithMany("DescriptiveResults")
                        .HasForeignKey("Question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("DescriptiveResults")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Exam_Portal.Models.Groups", b =>
                {
                    b.HasOne("Exam_Portal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Groups")
                        .HasForeignKey("Creator_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Exam_Portal.Models.Option", b =>
                {
                    b.HasOne("Exam_Portal.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("Question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Exam_Portal.Models.Question", b =>
                {
                    b.HasOne("Exam_Portal.Models.Question_type", "Question_Type")
                        .WithMany("Questions")
                        .HasForeignKey("Question_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.Tag", "Tag")
                        .WithMany("Questions")
                        .HasForeignKey("Tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question_Type");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Exam_Portal.Models.QuestionResult", b =>
                {
                    b.HasOne("Exam_Portal.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("Option_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.TestQuestion", "TestQuestion")
                        .WithMany()
                        .HasForeignKey("TestQuestion_id");

                    b.HasOne("Exam_Portal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("QuestionResults")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Option");

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("Exam_Portal.Models.Tag", b =>
                {
                    b.HasOne("Exam_Portal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Tags")
                        .HasForeignKey("Creator_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Exam_Portal.Models.Test", b =>
                {
                    b.HasOne("Exam_Portal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Tests")
                        .HasForeignKey("Faculty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.TestType", "TestType")
                        .WithMany("Tests")
                        .HasForeignKey("Type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("Exam_Portal.Models.TestQuestion", b =>
                {
                    b.HasOne("Exam_Portal.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("Question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("Test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Exam_Portal.Models.TotalResult", b =>
                {
                    b.HasOne("Exam_Portal.Models.Test", "Test")
                        .WithMany("TotalResults")
                        .HasForeignKey("Test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("TotalResults")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Exam_Portal.Models.UserGroup", b =>
                {
                    b.HasOne("Exam_Portal.Models.Groups", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("Group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserGroups")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Exam_Portal.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Exam_Portal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Exam_Portal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Exam_Portal.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Exam_Portal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam_Portal.Models.ApplicationUser", b =>
                {
                    b.Navigation("DescriptiveResults");

                    b.Navigation("Groups");

                    b.Navigation("QuestionResults");

                    b.Navigation("Tags");

                    b.Navigation("Tests");

                    b.Navigation("TotalResults");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Exam_Portal.Models.Groups", b =>
                {
                    b.Navigation("AssignedTests");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Exam_Portal.Models.Question", b =>
                {
                    b.Navigation("DescriptiveAnswers");

                    b.Navigation("DescriptiveResults");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Exam_Portal.Models.Question_type", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Exam_Portal.Models.Tag", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Exam_Portal.Models.Test", b =>
                {
                    b.Navigation("AssignedTests");

                    b.Navigation("TestQuestions");

                    b.Navigation("TotalResults");
                });

            modelBuilder.Entity("Exam_Portal.Models.TestType", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
