// <auto-generated />
using System;
using Exam_Portal.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Exam_Portal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Exam_Portal.Models.AssignedTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Group_id")
                        .HasColumnType("int");

                    b.Property<int>("Test_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Group_id");

                    b.HasIndex("Test_id");

                    b.ToTable("AssignedTests");
                });

            modelBuilder.Entity("Exam_Portal.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<string>("Division")
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User_id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Exam_Portal.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<string>("Division")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Exam_Portal.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Is_right_choice")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Option_")
                        .HasColumnType("text");

                    b.Property<int>("Question_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Question_id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Exam_Portal.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<string>("Question_")
                        .HasColumnType("text");

                    b.Property<int>("Tag_id")
                        .HasColumnType("int");

                    b.Property<int>("Test_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Tag_id");

                    b.HasIndex("Test_id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Exam_Portal.Models.QuestionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer_time")
                        .HasColumnType("text");

                    b.Property<bool>("Is_right")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Option_id")
                        .HasColumnType("int");

                    b.Property<int>("Question_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Option_id");

                    b.HasIndex("Question_id");

                    b.HasIndex("User_id");

                    b.ToTable("QuestionResults");
                });

            modelBuilder.Entity("Exam_Portal.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Tag_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Exam_Portal.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Faculty_id")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<int>("PassingMarks")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<bool>("Type")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Faculty_id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Exam_Portal.Models.TotalResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Result")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Test_id")
                        .HasColumnType("int");

                    b.Property<int>("Total_marks")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Test_id");

                    b.HasIndex("User_id");

                    b.ToTable("TotalResults");
                });

            modelBuilder.Entity("Exam_Portal.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<int>("ContactNo")
                        .HasColumnType("int");

                    b.Property<string>("DOB")
                        .HasColumnType("text");

                    b.Property<string>("Division")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Exam_Portal.Models.AssignedTest", b =>
                {
                    b.HasOne("Exam_Portal.Models.Group", "Group")
                        .WithMany("AssignedTests")
                        .HasForeignKey("Group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.Test", "Test")
                        .WithMany("AssignedTests")
                        .HasForeignKey("Test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Exam_Portal.Models.Group", b =>
                {
                    b.HasOne("Exam_Portal.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Exam_Portal.Models.Option", b =>
                {
                    b.HasOne("Exam_Portal.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("Question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Exam_Portal.Models.Question", b =>
                {
                    b.HasOne("Exam_Portal.Models.Tag", "Tag")
                        .WithMany("Questions")
                        .HasForeignKey("Tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("Test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Exam_Portal.Models.QuestionResult", b =>
                {
                    b.HasOne("Exam_Portal.Models.Option", "Option")
                        .WithMany("QuestionResults")
                        .HasForeignKey("Option_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.Question", "Question")
                        .WithMany("QuestionResults")
                        .HasForeignKey("Question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.User", "User")
                        .WithMany("QuestionResults")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Exam_Portal.Models.Test", b =>
                {
                    b.HasOne("Exam_Portal.Models.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("Faculty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Exam_Portal.Models.TotalResult", b =>
                {
                    b.HasOne("Exam_Portal.Models.Test", "Test")
                        .WithMany("TotalResults")
                        .HasForeignKey("Test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Portal.Models.User", "User")
                        .WithMany("TotalResults")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Exam_Portal.Models.Group", b =>
                {
                    b.Navigation("AssignedTests");
                });

            modelBuilder.Entity("Exam_Portal.Models.Option", b =>
                {
                    b.Navigation("QuestionResults");
                });

            modelBuilder.Entity("Exam_Portal.Models.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("QuestionResults");
                });

            modelBuilder.Entity("Exam_Portal.Models.Tag", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Exam_Portal.Models.Test", b =>
                {
                    b.Navigation("AssignedTests");

                    b.Navigation("Questions");

                    b.Navigation("TotalResults");
                });

            modelBuilder.Entity("Exam_Portal.Models.User", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("QuestionResults");

                    b.Navigation("Tests");

                    b.Navigation("TotalResults");
                });
#pragma warning restore 612, 618
        }
    }
}
